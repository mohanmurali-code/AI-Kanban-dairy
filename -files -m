[1mdiff --git a/apps/web/src/pages/Kanban.tsx b/apps/web/src/pages/Kanban.tsx[m
[1mindex 6800a65..4eb7368 100644[m
[1m--- a/apps/web/src/pages/Kanban.tsx[m
[1m+++ b/apps/web/src/pages/Kanban.tsx[m
[36m@@ -1,7 +1,9 @@[m
 import { DndContext, type DragEndEvent } from '@dnd-kit/core'[m
[31m-import { useState } from 'react'[m
[32m+[m[32mimport { useState, useEffect } from 'react'[m
 import { useTaskStore } from '../store/tasks'[m
[31m-import type { ColumnKey } from '../types'[m
[32m+[m[32mimport { TaskCard } from '../components/TaskCard'[m
[32m+[m[32mimport { TaskCreationModal } from '../components/TaskCreationModal'[m
[32m+[m[32mimport type { ColumnKey, TaskItem } from '../types'[m
 [m
 /**[m
  * Column definitions for the Kanban board.[m
[36m@@ -18,28 +20,55 @@[m [mconst columns: { key: ColumnKey; name: string }[] = [[m
 /**[m
  * Kanban board page.[m
  *[m
[31m- * Displays task columns, quick-add inputs per column, and sets up a drag-and-drop[m
[31m- * context. Drag-and-drop behavior will be implemented in a later iteration.[m
[32m+[m[32m * Displays task columns with inline editing support and a task creation modal.[m
[32m+[m[32m * Drag-and-drop behavior will be implemented in a later iteration.[m
  */[m
 function Kanban() {[m
[31m-  const { tasks, columnOrder, createTask } = useTaskStore()[m
[31m-  /** Local input state for quick task creation per column. */[m
[31m-  const [draftInput, setDraftInput] = useState<Record<ColumnKey, string>>({[m
[31m-    draft: '',[m
[31m-    refined: '',[m
[31m-    in_progress: '',[m
[31m-    blocked: '',[m
[31m-    completed: '',[m
[31m-  })[m
[32m+[m[32m  const { tasks, columnOrder } = useTaskStore()[m
[32m+[m[32m  const [isModalOpen, setIsModalOpen] = useState(false)[m
[32m+[m[32m  const [modalDefaultStatus, setModalDefaultStatus] = useState<ColumnKey>('draft')[m
 [m
   /**[m
[31m-   * Create a new task in the given column if the input has a non-empty title.[m
[32m+[m[32m   * Handle global keyboard shortcuts.[m
    */[m
[31m-  const onAdd = (status: ColumnKey) => {[m
[31m-    const title = draftInput[status].trim()[m
[31m-    if (!title) return[m
[31m-    createTask({ title, status })[m
[31m-    setDraftInput((s) => ({ ...s, [status]: '' }))[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    const handleKeyDown = (e: KeyboardEvent) => {[m
[32m+[m[32m      // Ctrl/Cmd + N to open task creation modal[m
[32m+[m[32m      if ((e.ctrlKey || e.metaKey) && e.key === 'n') {[m
[32m+[m[32m        e.preventDefault()[m
[32m+[m[32m        setModalDefaultStatus('draft')[m
[32m+[m[32m        setIsModalOpen(true)[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    document.addEventListener('keydown', handleKeyDown)[m
[32m+[m[32m    return () => document.removeEventListener('keydown', handleKeyDown)[m
[32m+[m[32m  }, [])[m
[32m+[m
[32m+[m[32m  /**[m
[32m+[m[32m   * Open the task creation modal with a specific column preselected.[m
[32m+[m[32m   */[m
[32m+[m[32m  const openCreateModal = (status: ColumnKey) => {[m
[32m+[m[32m    setModalDefaultStatus(status)[m
[32m+[m[32m    setIsModalOpen(true)[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  /**[m
[32m+[m[32m   * Close the task creation modal.[m
[32m+[m[32m   */[m
[32m+[m[32m  const closeCreateModal = () => {[m
[32m+[m[32m    setIsModalOpen(false)[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  /**[m
[32m+[m[32m   * Handle task creation from the modal.[m
[32m+[m[32m   */[m
[32m+[m[32m  const handleTaskCreated = (task: TaskItem) => {[m
[32m+[m[32m    // Task is automatically added to the store, so we just close the modal[m
[32m+[m[32m    // unless it's "Create & Add Another" mode[m
[32m+[m[32m    if (!task) {[m
[32m+[m[32m      closeCreateModal()[m
[32m+[m[32m    }[m
   }[m
 [m
   /**[m
[36m@@ -52,43 +81,70 @@[m [mfunction Kanban() {[m
 [m
   return ([m
     <div className="space-y-4">[m
[31m-      <h2 className="text-xl font-semibold">Kanban</h2>[m
[32m+[m[32m      <div className="flex items-center justify-between">[m
[32m+[m[32m        <h2 className="text-xl font-semibold">Kanban</h2>[m
[32m+[m[32m        <button[m
[32m+[m[32m          onClick={() => openCreateModal('draft')}[m
[32m+[m[32m          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"[m
[32m+[m[32m        >[m
[32m+[m[32m          + New Task[m
[32m+[m[32m        </button>[m
[32m+[m[32m      </div>[m
[32m+[m
       <DndContext onDragEnd={onDragEnd}>[m
         <div className="grid grid-cols-1 gap-4 md:grid-cols-5">[m
           {columns.map(({ key, name }) => ([m
[31m-            <div key={key} className="rounded-md border p-3">[m
[32m+[m[32m            <div key={key} className="rounded-md border bg-gray-50 p-3">[m
               <div className="mb-2 flex items-center justify-between">[m
[31m-                <div className="text-sm font-medium opacity-80">{name}</div>[m
[31m-                <div className="text-xs opacity-60">{columnOrder[key]?.length ?? 0}</div>[m
[32m+[m[32m                <div className="text-sm font-medium text-gray-700">{name}</div>[m
[32m+[m[32m                <div className="text-xs text-gray-500 bg-white px-2 py-1 rounded-full">[m
[32m+[m[32m                  {columnOrder[key]?.length ?? 0}[m
[32m+[m[32m                </div>[m
               </div>[m
[31m-              <div className="space-y-2">[m
[32m+[m[41m              [m
[32m+[m[32m              <div className="space-y-2 min-h-[100px]">[m
                 {(columnOrder[key] ?? []).map((taskId) => {[m
[31m-                  const t = tasks[taskId][m
[31m-                  return ([m
[31m-                    <div key={taskId} className="rounded-md border p-2 text-sm">[m
[31m-                      {t.title}[m
[31m-                    </div>[m
[31m-                  )[m
[32m+[m[32m                  const task = tasks[taskId][m
[32m+[m[32m                  if (!task) return null[m
[32m+[m[41m                  [m
[32m+[m[32m                  return <TaskCard key={taskId} task={task} />[m
                 })}[m
[32m+[m[41m                [m
[32m+[m[32m                {/* Empty state */}[m
[32m+[m[32m                {(!columnOrder[key] || columnOrder[key].length === 0) && ([m
[32m+[m[32m                  <div className="text-center py-8 text-gray-500">[m
[32m+[m[32m                    <div className="text-sm mb-2">No tasks yet</div>[m
[32m+[m[32m                    <button[m
[32m+[m[32m                      onClick={() => openCreateModal(key)}[m
[32m+[m[32m                      className="text-blue-600 hover:text-blue-700 text-sm underline"[m
[32m+[m[32m                    >[m
[32m+[m[32m                      Add your first task[m
[32m+[m[32m                    </button>[m
[32m+[m[32m                  </div>[m
[32m+[m[32m                )}[m
               </div>[m
[31m-              <div className="mt-3 flex gap-2">[m
[31m-                <input[m
[31m-                  className="w-full rounded-md border bg-transparent p-2 text-sm"[m
[31m-                  placeholder="Quick add"[m
[31m-                  value={draftInput[key]}[m
[31m-                  onChange={(e) => setDraftInput((s) => ({ ...s, [key]: e.target.value }))}[m
[31m-                  onKeyDown={(e) => {[m
[31m-                    if (e.key === 'Enter') onAdd(key)[m
[31m-                  }}[m
[31m-                />[m
[31m-                <button className="rounded-md border px-3 py-2 text-sm" onClick={() => onAdd(key)}>[m
[31m-                  Add[m
[32m+[m[41m              [m
[32m+[m[32m              {/* Quick Add Button */}[m
[32m+[m[32m              <div className="mt-3">[m
[32m+[m[32m                <button[m
[32m+[m[32m                  onClick={() => openCreateModal(key)}[m
[32m+[m[32m                  className="w-full px-3 py-2 